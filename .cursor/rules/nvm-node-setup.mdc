---
description: "NVM + Node setup: ensure correct Node via nvm/corepack for dev/build and on version errors"
globs:
  - "package.json"
  - ".nvmrc"
  - ".tool-versions"
  - ".node-version"
  - ".cursor/**/*"
alwaysApply: false
triggers:
  - "node"
  - "nvm"
  - "yarn"
  - "npm"
  - "pnpm"
  - "astro"
---

<rule>
name: nvm_node_setup
description: Ensure Node.js is managed by nvm before running dev/build commands and when Node version errors occur

filters:
  # Trigger before common dev/build commands
  - type: event
    pattern: "terminal_pre_run"
  - type: content
    pattern: "\\b((yarn|pnpm)\\s+(dev|build|preview|start|lint)|npm\\s+run\\s+(dev|build|preview|start|lint)|npx\\s+astro\\s+(dev|build|preview)|astro\\s+(dev|build|preview))\\b"

actions:
  - type: suggest
    message: |
      Before running dev/build commands, initialize nvm and use the project's Node version.

      Intelligent setup (safe to paste in terminal):
      ```sh
      set -euo pipefail
      # Load nvm if available (macOS/Homebrew default path); otherwise try standard install path
      if ! command -v nvm >/dev/null 2>&1; then
        export NVM_DIR="${NVM_DIR:-$HOME/.nvm}"
        [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
        [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
      fi

      if ! command -v nvm >/dev/null 2>&1; then
        echo "nvm not found. Install nvm first (macOS: brew install nvm; see https://github.com/nvm-sh/nvm)."
        exit 1
      fi

      # Choose version from .nvmrc if present (use last non-empty line), else use LTS
      if [ -f .nvmrc ]; then
        wanted="$(grep -Eo '^[^#].*' .nvmrc | tail -n 1 | tr -d 'v' | xargs)"
        if [ -n "${wanted}" ]; then
          nvm install "${wanted}" --silent >/dev/null 2>&1 || nvm install "${wanted}" >/dev/null 2>&1
          nvm use "${wanted}" --silent >/dev/null 2>&1 || nvm use "${wanted}"
        else
          nvm install --lts --silent >/dev/null 2>&1 || nvm install --lts >/dev/null 2>&1
          nvm use --lts --silent >/dev/null 2>&1 || nvm use --lts
        fi
      else
        nvm install --lts --silent >/dev/null 2>&1 || nvm install --lts >/dev/null 2>&1
        nvm use --lts --silent >/dev/null 2>&1 || nvm use --lts
      fi

      # Enable Corepack so Yarn uses the version from packageManager in package.json
      corepack enable >/dev/null 2>&1 || true

      echo "Using Node $(node -v)"
      command -v yarn >/dev/null 2>&1 && yarn -v || true
      ```

examples:
  - input: |
      yarn dev
    output: |
      Initializes nvm and selects the requested Node version before running the command.

metadata:
  priority: high
  version: 1.2
</rule>

<rule>
name: nvm_on_node_version_error
description: Detect Node version errors and suggest running nvm automatically

filters:
  # Detect common Node.js version errors from tools
  - type: event
    pattern: "terminal_error"
  - type: content
    pattern: "Node\.js v.* is not supported|Please upgrade Node\.js|Engines\\s+\\"node\\"|Expected version|use nvm|nvm: command not found|command not found: astro|ERR_OSSL|SyntaxError: Unexpected token 'export'"

actions:
  - type: suggest
    message: |
      It looks like there's a Node.js environment/version issue. Initialize nvm and select the correct version, then retry your command.

      ```sh
      set -euo pipefail
      if ! command -v nvm >/dev/null 2>&1; then
        export NVM_DIR="${NVM_DIR:-$HOME/.nvm}"
        [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
        [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
      fi

      if ! command -v nvm >/dev/null 2>&1; then
        echo "nvm not found. Install nvm first (macOS: brew install nvm; see https://github.com/nvm-sh/nvm)."
        exit 1
      fi

      if [ -f .nvmrc ]; then
        wanted="$(grep -Eo '^[^#].*' .nvmrc | tail -n 1 | tr -d 'v' | xargs)"
        if [ -n "${wanted}" ]; then
          nvm install "${wanted}" --silent >/dev/null 2>&1 || nvm install "${wanted}" >/dev/null 2>&1
          nvm use "${wanted}" --silent >/dev/null 2>&1 || nvm use "${wanted}"
        else
          nvm install --lts --silent >/dev/null 2>&1 || nvm install --lts >/dev/null 2>&1
          nvm use --lts --silent >/dev/null 2>&1 || nvm use --lts
        fi
      else
        nvm install --lts --silent >/dev/null 2>&1 || nvm install --lts >/dev/null 2>&1
        nvm use --lts --silent >/dev/null 2>&1 || nvm use --lts
      fi

      corepack enable >/dev/null 2>&1 || true
      echo "Using Node $(node -v)"
      ```

examples:
  - input: |
      Node.js v18.19.0 is not supported by Astro!
    output: |
      Suggests running the nvm initialization block and then rerunning the previous command with yarn.

metadata:
  priority: high
  version: 1.2
</rule>
