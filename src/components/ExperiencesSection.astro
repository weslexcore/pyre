---
import experiences from '../lib/experiences';
import { Image } from 'astro:assets';
import { withBase } from '../lib/paths';
import connectionSymbol from '../assets/symbols/connection-symbol.png';
import harmonySymbol from '../assets/symbols/harmony-symbol.png';
import transformationSymbol from '../assets/symbols/transformation-symbol.png';
import backgroundImage from '../assets/images/bucket_with_red_flowers.jpg';

const symbols = {
  connection: connectionSymbol,
  harmony: harmonySymbol,
  transformation: transformationSymbol,
};
---

<section aria-labelledby="experiences-heading" class="relative text-[var(--foreground)]">
  <!-- Background video wrapper
  <div class="absolute inset-0 z-[-10] overflow-hidden pointer-events-none">
    {
      /* Use manifest-driven multi-source video; fallback to existing mp4 if manifest missing */
    }
    {
      /* @ts-ignore - Astro template usage */
    }
    <!-- <Fragment>
      <video
        id="experiences-bg-video"
        class="w-full h-full object-cover"
        autoplay
        muted
        loop
        playsinline
        preload="metadata"
        aria-hidden="true"
        poster={withBase('/videos/candles.1e2ff5d557370980.poster.jpg')}
      >
        <source src={withBase('/videos/candles.1e2ff5d557370980.720p.webm')} type="video/webm" />
        <source src={withBase('/videos/candles.1e2ff5d557370980.720p.mp4')} type="video/mp4" />
      </video>
    </Fragment>
  </div> -->

  <div class="absolute inset-0 z-[-1] overflow-hidden" aria-hidden="true">
    <Image
      src={backgroundImage}
      alt={"Bucket with red flowers"}
      width="5152"
      height="7728"
      loading="lazy"
      decoding="async"
      class="h-full w-full object-cover object-center"
    />
    <!-- Contrast overlay -->
    <div class="absolute inset-0 bg-[rgba(0,0,0,0.25)]"></div>
  </div>

  <div class="mx-auto w-full px-4 sm:max-w-screen-sm md:max-w-screen-md lg:max-w-screen-lg xl:max-w-screen-xl py-10 sm:py-12">
    <h2 id="experiences-heading" class="font-primary-semibold tracking-[-0.02em] uppercase text-[clamp(3.5rem,5vw,4rem)] leading-[1.1] mb-6 sm:mb-8 text-[var(--pyre-creme)]">{experiences.elements.title}</h2>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8">
      {experiences.elements.items.map((experience) => (
        <article class="bg-[var(--pyre-black)]/75 text-[var(--pyre-creme)] p-6 sm:p-8" aria-labelledby={`experience-${experience.title.toLowerCase()}-title`}>
          <div class="flex flex-col items-start gap-4">
            <div class="bg-[var(--pyre-blue)] rounded-full flex items-center justify-center w-20 h-20 sm:w-24 sm:h-24">
              <Image
                src={symbols[experience.icon as keyof typeof symbols]}
                alt={experience.icon ?? ''}
                width="120"
                height="120"
                loading="lazy"
                decoding="async"
                class="w-full h-full object-contain"
              />
            </div>

            <h3 id={`experience-${experience.title.toLowerCase()}-title`} class="font-primary-semibold tracking-[-0.02em] uppercase text-[clamp(1.25rem,4vw,1.618rem)]">{experience.title}</h3>

            <p class="text-base leading-relaxed">{experience.description}</p>

            <ul class="list-disc pl-6 space-y-2 max-w-[75ch]">
              {experience.bullets.map((bullet) => (
                <li>{bullet}</li>
              ))}
            </ul>
            {/* <div class="flex">
              <div class="flex-1"></div>
              <a
                href={experience.link?.href}
                class="font-primary-semibold tracking-[-0.02em] uppercase text-[var(--pyre-red)] text-center"
              >
                {experience.linkText} &gt;
              </a>
            </div> */}
          </div>
        </article>
      ))}
    </div>
  </div>
  <script>
    (async () => {
      const video = document.getElementById('experiences-bg-video');
      if (!(video instanceof HTMLVideoElement)) return;

      try {
        const res = await fetch(import.meta.env.BASE_URL + 'videos/videos.manifest.json', { cache: 'no-cache' });
        if (res.ok) {
          const manifest = await res.json();
          const entry = manifest.sources?.find((s) => s.id.includes('candles'));
          if (entry) {
            // Rebuild sources: prefer WebM then MP4
            while (video.firstChild) video.removeChild(video.firstChild);
            if (entry.poster?.url) video.poster = import.meta.env.BASE_URL + entry.poster.url.replace(/^\//, '');
            const ordered = [
              ...entry.variants.filter((v) => v.format === 'webm').sort((a,b)=>b.height-a.height),
              ...entry.variants.filter((v) => v.format === 'mp4').sort((a,b)=>b.height-a.height),
            ];
            for (const v of ordered) {
              const s = document.createElement('source');
              s.src = import.meta.env.BASE_URL + v.url.replace(/^\//, '');
              s.type = v.format === 'webm' ? 'video/webm' : 'video/mp4';
              video.appendChild(s);
            }
            // In case the browser doesn't select automatically
            try { await video.load(); } catch {}
          }
        }
      } catch {}

      const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
      const applyPlaybackPrefs = () => {
        try { video.playbackRate = 0.5; } catch {}
        if (mediaQuery.matches) {
          try { video.pause(); } catch {}
        }
      };
      const onLoaded = () => applyPlaybackPrefs();
      if (video.readyState >= 1) onLoaded();
      else video.addEventListener('loadedmetadata', onLoaded, { once: true });
      try {
        const observer = new IntersectionObserver((entries) => {
          for (const entry of entries) {
            if (entry.isIntersecting && !mediaQuery.matches) video.play().catch(() => {});
            else video.pause();
          }
        }, { threshold: 0.1 });
        observer.observe(video);
      } catch {}
    })();
  </script>
    <!-- <RepeatingLogoBackground aria-hidden="true" class="h-16 w-full bg-[var(--pyre-red)]" positionClass="bg-center" /> -->
</section>
