---
// @ts-ignore - types provided via astro/client
import { Image } from 'astro:assets';

export interface Props {
  name: 'sauna' | 'community' | 'connection' | 'growth' | 'harmony' | 'healing' | 'ritual' | 'transformation' | 'wellness';
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
  className?: string;
  alt?: string;
  prominent?: boolean;
}

const { name, size = 'md', className = '', alt, prominent = false } = Astro.props;

// Validate symbol name exists in our mapping
const validSymbols = ['sauna', 'community', 'connection', 'growth', 'harmony', 'healing', 'ritual', 'transformation', 'wellness'];
if (!validSymbols.includes(name)) {
  console.warn(`Symbol "${name}" not found in valid symbols list. Available symbols: ${validSymbols.join(', ')}`);
}

// Size mapping - Updated to use larger sizes
const sizeMap = {
  sm: 'symbol-sm',
  md: 'symbol-md',
  lg: 'symbol-lg',
  xl: 'symbol-xl',
  xxl: 'symbol-xxl'
};

// Symbol name mapping to file paths
const symbolMap: Record<string, string> = {
  'sauna': '/symbols/sauna-symbol.png',
  'community': '/symbols/community-symbol.png',
  'connection': '/symbols/connection-symbol.png',
  'growth': '/symbols/growth-symbol.png',
  'harmony': '/symbols/harmony-symbol.png',
  'healing': '/symbols/healing-symbol.png',
  'ritual': '/symbols/ritual-symbol.png',
  'transformation': '/symbols/transformation-symbol.png',
  'wellness': '/symbols/wellness-symbol.png'
};

const symbolPath = symbolMap[name] || `/symbols/${name}-symbol.png`;
const sizeClass = prominent ? 'symbol-prominent' : sizeMap[size];
const defaultAlt = `${name} symbol`;

// Removed client-side network validation to avoid runtime fetches

// Size mapping for Image component dimensions - Updated to match new sizes
const sizeDimensions = {
  sm: { width: 80, height: 80 },
  md: { width: 120, height: 120 },
  lg: { width: 160, height: 160 },
  xl: { width: 200, height: 200 },
  xxl: { width: 240, height: 240 }
};

const dimensions = prominent ? { width: 280, height: 280 } : sizeDimensions[size];
---

<Image 
  src={symbolPath} 
  alt={alt || defaultAlt}
  class={`${sizeClass} object-contain symbol-hover ${className}`}
  width={dimensions.width}
  height={dimensions.height}
  role="img"
  aria-label={alt || defaultAlt}
/> 