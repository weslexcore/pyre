---
import Button from './Button.astro';
import signupForm from '../lib/signupForm';
import { Image } from 'astro:assets';
const subscribed = Astro.url.searchParams.get(signupForm.metadata?.subscribedParam ?? 'subscribed') === '1';
import signupFormBackground from '@/assets/images/orbs.jpeg';
import signupFormPanel from '@/assets/images/heads_with_flowers.jpeg';
import signupFormSymbol from '@/assets/symbols/connection-symbol.png';
---

<div id="waitlist" aria-hidden="true" class="h-0"></div>
<div id="signup-wrapper" class="signup-wrapper">
<section id="signup" aria-labelledby="signup-heading" class="relative text-[var(--card-foreground)] w-full">
  <div class="absolute inset-0 z-[-1] pointer-events-none" aria-hidden="true">
    <Image src={signupFormBackground} alt={"Orbs"} width="1600" height="1067" class="h-full w-full object-cover object-center" loading="lazy" decoding="async" />
  </div>
  <div class="absolute inset-0 bg-[rgba(0,0,0,0.2)] z-[-1] pointer-events-none" aria-hidden="true" />

  <div class="w-full px-4 py-12 sm:py-16">
    <div class="grid grid-cols-1 md:grid-cols-12 gap-6 md:gap-8 items-stretch w-full">
      <!-- Image Panel: first on mobile, right on desktop -->
      <div class="order-1 md:order-2 md:col-span-6 relative">
        <div class="h-[45vh] md:h-full w-full overflow-clip">
          <Image
            src={signupFormPanel}
            alt={"Multiple exposures of heads and flowers"}
            width="1600"
            height="1067"
            loading="lazy"
            decoding="async"
            class="h-full w-full object-cover object-center"
          />
        </div>
      </div>

      <!-- Content: left on desktop, second on mobile -->
      <div class="order-2 md:order-1 md:col-span-6 flex items-center py-4 md:py-0">
        <div class="w-full max-w-[75ch]">
          <div class="flex items-start gap-4 mb-6 sm:mb-8">
            <div
              class="bg-[var(--pyre-red)] rounded-full flex items-center justify-center w-16 h-16 sm:w-20 sm:h-20 md:w-24 md:h-24 lg:w-28 lg:h-28 flex-shrink-0"
            >
              <Image
                src={signupFormSymbol}
                alt={"Connection symbol"}
                width="120"
                height="120"
                decoding="async"
                class="w-full h-full object-contain"
              />
            </div>
            <div class="text-[var(--pyre-creme)]">
              <h2 id="signup-heading" class="font-primary-semibold tracking-[-0.02em] uppercase text-[clamp(3.5rem,5vw,4rem)] leading-[1.1] mb-3">{signupForm.elements.title}</h2>
              <p class="font-mono-bold leading-relaxed">{signupForm.elements.subtitle}</p>

              {subscribed && (
                <div role="status" class="mt-4 rounded-md border p-3 bg-[oklch(0.96_0.01_60)]">{signupForm.elements.successMessage}</div>
              )}

              <form class="mt-6 flex flex-col gap-3 " method="POST" action={signupForm.mailchimp.action} novalidate data-honeypot={signupForm.mailchimp.honeypotFieldName}>
                <div class="flex-1 min-w-0 relative w-full">
                  <label for="email" class="block text-sm font-primary-semibold font-mono-bold md:sr-only">{signupForm.elements.emailLabel}</label>
                  <input
                    id="email"
                    name="EMAIL"
                    type="email"
                    required
                    inputmode="email"
                    autocomplete="email"
                    class="mt-1 md:mt-0 w-full rounded-md border border-[var(--input)] bg-[var(--card)] px-3 py-2 text-base text-[var(--foreground)] focus:outline-[var(--ring)] pointer-events-auto cursor-text md:h-12"
                  />
                  <input type="hidden" name="tags" value={signupForm.mailchimp.tagId} />
                  <input type="text" name={signupForm.mailchimp.honeypotFieldName} tabindex="-1" autocomplete="off" aria-hidden="true" class="sr-only" />
                  <p id="email-error" aria-live="polite" class="mt-1 text-sm text-[var(--destructive)] md:absolute md:top-full md:left-0 md:mt-1"></p>
                </div>
                <div>
                  <Button type="submit" variant="primary" size="md" class="md:h-12">{signupForm.elements.submitLabel}</Button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    const form = document.querySelector('#signup form') as HTMLFormElement | null;
    if (form) {
      form.addEventListener('submit', async (event) => {
        const emailInput = form.querySelector('#email');
        const errorEl = form.querySelector('#email-error');
        if (!(emailInput instanceof HTMLInputElement) || !(errorEl instanceof HTMLElement)) {
          return;
        }
        errorEl.textContent = '';
        const email = emailInput.value.trim();
        const emailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        if (!emailValid) {
          event.preventDefault();
          errorEl.textContent = 'Please enter a valid email.';
          emailInput.focus();
          return;
        }
        // Honeypot check: if filled, drop submission silently
        const honeypotName = form.getAttribute('data-honeypot');
        const honeypotInput = honeypotName ? form.querySelector('input[name="'+ honeypotName +'"]') : null;
        if (honeypotInput && honeypotInput instanceof HTMLInputElement && honeypotInput.value.trim() !== '') {
          event.preventDefault();
          return;
        }

        // Progressive enhancement: JSONP to Mailchimp
        event.preventDefault();
        const submitBtn = form.querySelector('button');
        if (submitBtn instanceof HTMLButtonElement) submitBtn.disabled = true;
        try {
          const action = form.getAttribute('action') || '';
          const url = new URL(action);
          // Build post-json URL
          url.pathname = url.pathname.replace('/subscribe/post', '/subscribe/post-json');
          const params = new URLSearchParams(url.search);
          params.set('u', params.get('u') || '');
          params.set('id', params.get('id') || '');
          if (params.has('f_id')) params.set('f_id', params.get('f_id') || '');
          params.set('EMAIL', email);
          const tagInput = form.querySelector('input[name="tags"]');
          if (tagInput && tagInput instanceof HTMLInputElement && tagInput.value) {
            params.set('tags', tagInput.value);
          }
          const callbackName = '__mc_cb_'+Math.random().toString(36).slice(2);
          params.set('c', callbackName);
          const jsonpUrl = url.origin + url.pathname + '?' + params.toString();

          await new Promise((resolve) => setTimeout(resolve, 0));
          const script = document.createElement('script');
          script.src = jsonpUrl;
          script.async = true;

          function cleanup() {
            try { delete window[callbackName]; } catch (e) {}
            if (script.parentNode) script.parentNode.removeChild(script);
          }

          window[callbackName] = function(response) {
            cleanup();
            if (response && response.result === 'success') {
              emailInput.value = '';
              errorEl.setAttribute('role', 'status');
              errorEl.style.color = '';
              errorEl.textContent = 'Thanks for subscribing!';
              const urlObj = new URL(window.location.href);
              urlObj.searchParams.set('subscribed', '1');
              window.history.replaceState({}, '', urlObj.toString());
            } else if (response && response.msg) {
              errorEl.removeAttribute('role');
              errorEl.textContent = String(response.msg).replace(/<[^>]*>/g, '');
            } else {
              errorEl.removeAttribute('role');
              errorEl.textContent = 'Something went wrong. Please try again later.';
            }
            if (submitBtn instanceof HTMLButtonElement) submitBtn.disabled = false;
          };

          script.addEventListener('error', () => {
            cleanup();
            if (submitBtn instanceof HTMLButtonElement) submitBtn.disabled = false;
            // On failure, fall back to native POST by submitting normally
            if (form) form.submit();
          }, { once: true });

          document.body.appendChild(script);
        } catch (e) {
          if (submitBtn instanceof HTMLButtonElement) submitBtn.disabled = false;
          // Fall back to native submit
          if (form) form.submit();
        }
      });
    }
  </script>
</section>
</div>

<style>
  /* Default state: normal document flow */
  .signup-wrapper {
    display: block;
    width: 100vw;
    max-width: 100vw;
    margin-left: 0;
    margin-right: 0;
  }

  /* Make the section itself full width */
  #signup {
    width: 100vw;
    max-width: 100vw;
    margin-left: 0;
    margin-right: 0;
  }
  
  /* Centered state: full viewport centering */
  .signup-wrapper.centered {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .signup-wrapper {
      scroll-behavior: auto;
    }
  }
</style>

<script>
  // Intent detection and centering logic
  (function() {
    function checkSignupIntent() {
      const hash = window.location.hash;
      const searchParams = new URLSearchParams(window.location.search);
      return hash === '#signup' || searchParams.get('signup') === '1';
    }
    
    function applyCentering(shouldCenter) {
      const wrapper = document.getElementById('signup-wrapper');
      if (!wrapper) return;
      
      if (shouldCenter) {
        wrapper.classList.add('centered');
      } else {
        wrapper.classList.remove('centered');
      }
    }
    
    function focusAndSelectEmail() {
      try {
        const emailInput = document.getElementById('email');
        if (emailInput && emailInput instanceof HTMLInputElement) {
          emailInput.focus();
          emailInput.select();
        }
      } catch (error) {
        // Graceful fallback - silently handle any focus errors
        console.debug('Focus error handled gracefully:', error);
      }
    }
    
    function handleSignupIntent() {
      const hasIntent = checkSignupIntent();
      applyCentering(hasIntent);
      
      if (hasIntent) {
        // Use requestAnimationFrame to ensure DOM has updated
        requestAnimationFrame(() => {
          focusAndSelectEmail();
        });
      }
    }
    
    // Initial check on page load
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', handleSignupIntent, { once: true });
    } else {
      handleSignupIntent();
    }
    
    // Listen for hash changes (for in-page navigation)
    window.addEventListener('hashchange', handleSignupIntent, { passive: true });
    
    // Listen for popstate (for browser back/forward)
    window.addEventListener('popstate', handleSignupIntent, { passive: true });
  })();
</script>
